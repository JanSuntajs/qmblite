from qmbmodels.senderscripts.batchsend import BatchSender
from qmbmodels.utils.cmd_parser_tools import mode_parser

from qmbmodels.models.prepare_model import import_model
import numpy as np

if __name__ == '__main__':
    nener = 500
    entro_one_body_states = 1000
    entro_filling_fraction = 0.5
    dim = 2
    # '/scratch/jan/Anderson_model_paper/'
    storage = '/exa5/scratch/user/jsuntajs/Anderson_2D_paper_vega_calculations/'
    ham_type = 'anderson'
    model = 'anderson'
    mod = import_model(model)
    params = {
        'L': [32, 40],
        'dim': [dim],
        't': [-1.],
        'W': [0.],
        # [f'{el:.2f}' for el in np.arange(10.00, 20.50, 0.25)],
        'dW': [f'{el:.2f}' for el in np.arange(1., 16., 1)], #[f'{el:.2f}' for el in np.arange(0.5, 20.5, 0.25)],
        'pbc': [True],
        'ham_type': [ham_type],
        'disorder': ['uniform'],
        'min_seed': [1],
        'max_seed': [100],  # [21],
        'step_seed': [1],
        'sff_min_tau': [-5],
        'sff_max_tau': [np.log10(5 * 2 * np.pi)],
        'sff_n_tau': [5000],
        'sff_eta_min': [0.1],
        'sff_eta_max': [0.5],
        'sff_eta_step': [0.2],
        'sff_unfolding_n': [3],
        'sff_filter': ['gaussian'],
        'r_step': [0.05],
        'r_nener': [nener],
        'kohn_nener': [nener],
        'matelts_nener': [nener],
        'eentro_filling': [entro_filling_fraction],
        'eentro_nstates': [entro_one_body_states],

    }

    redef = {
        'sff_min_tau': lambda x: {'sff_min_tau':
                                  np.log10(1. / x['L']**x['dim'])}}
    # shift and invert parameters
    sinvert_params = ['--model={}'.format(model),
                      '-eps_type krylovschur', f'-eps_nev {nener}',
                      '-st_type sinvert',
                      '-st_ksp_type preonly',
                      '-st_pc_type lu',
                      '-st_pc_factor_mat_solver_type mumps',
                      '-mat_mumps_icntl_28 2',
                      '-mat_mumps_icntl_29 2']

    syspar_keys = mod.syspar_keys
    modpar_keys = mod.modpar_keys
    auxpar_keys = ['sff_min_tau', 'sff_max_tau', 'sff_n_tau', 'sff_eta_min',
                   'sff_eta_max', 'sff_eta_step',
                   'sff_unfolding_n', 'sff_filter', 'r_step', 'r_nener',
                   'kohn_nener', 'matelts_nener', 'eentro_filling',
                   'eentro_nstates']

    # full_diag_data_for_paper_kohn_conductivity'
    name = (f'{model}_{dim}D_eentropy_nstates_'
            f'{entro_one_body_states}_'
            f'filling_{entro_filling_fraction:.2f}')
    #name = 'vega_test_run'
    time = "02:59:59"
    nodes = 1   # number of nodes
    ntasks = 1  # number of threads
    memcpu = 0.5  # memory in GB per CPU!
    cputask = 16

    slurm_opt = []
    queue, mode = mode_parser()

    print(f"{mode}")
    # args = arg_parser(syspar_keys, modpar_keys)

    sender = BatchSender(params, syspar_keys, modpar_keys,
                         auxpar_keys, cmd_opt=sinvert_params,
                         storage=storage, slurm_opt=slurm_opt,
                         redef=redef)

    sender.run_jobs(mode, queue=queue,
                    time=time, nodes=nodes, ntasks=ntasks,
                    memcpu=memcpu, name=name, sourcename='petscenv',
                    cputask=cputask, module='Anaconda3/5.3.0')
